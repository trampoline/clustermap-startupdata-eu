// Compiled by ClojureScript 0.0-2173
goog.provide('clustermap.routes');
goog.require('cljs.core');
goog.require('sablono.core');
goog.require('sablono.core');
clustermap.routes.type_name_keys = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$362,cljs.core.constant$keyword$327,cljs.core.constant$keyword$363,cljs.core.constant$keyword$327,cljs.core.constant$keyword$364,cljs.core.constant$keyword$389], null);
clustermap.routes.name_for = (function name_for(type,obj){return cljs.core.get.cljs$core$IFn$_invoke$arity$2(obj,cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_name_keys,type));
});
clustermap.routes.portfolio_company_path = (function portfolio_company_path(view_id,obj){return [cljs.core.str("#/"),cljs.core.str(cljs.core.name(view_id)),cljs.core.str("/portfolio-company/"),cljs.core.str(cljs.core.constant$keyword$425.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.investor_company_path = (function investor_company_path(view_id,obj){return [cljs.core.str("#/"),cljs.core.str(cljs.core.name(view_id)),cljs.core.str("/investor-company/"),cljs.core.str(cljs.core.constant$keyword$386.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.constituency_path = (function constituency_path(view_id,obj){return [cljs.core.str("#/"),cljs.core.str(cljs.core.name(view_id)),cljs.core.str("/constituency/"),cljs.core.str(cljs.core.constant$keyword$388.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.no_selection_path = (function no_selection_path(view_id,_){return [cljs.core.str("#/"),cljs.core.str(cljs.core.name(view_id))].join('');
});
clustermap.routes.type_paths = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.constant$keyword$362,clustermap.routes.portfolio_company_path,cljs.core.constant$keyword$363,clustermap.routes.investor_company_path,cljs.core.constant$keyword$364,clustermap.routes.constituency_path,null,clustermap.routes.no_selection_path], null);
clustermap.routes.path_for = (function path_for(view_id,type,obj){return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_paths,type),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [view_id,obj], null));
});
clustermap.routes.link_for = (function link_for(view_id,type,obj){return React.DOM.a({"href": clustermap.routes.path_for(view_id,type,obj)},sablono.interpreter.interpret(clustermap.routes.name_for(type,obj)));
});
