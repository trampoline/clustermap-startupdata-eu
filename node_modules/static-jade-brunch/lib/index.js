// Generated by CoffeeScript 1.3.3
(function() {
  var StaticJadeCompiler, clone, color, extend, fileWriter, fs, growl, isArray, jade, loadPackages, logError, mkdirp, sysPath,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jade = require('jade');

  sysPath = require('path');

  mkdirp = require('mkdirp');

  fs = require('fs');

  color = require('ansi-color').set;

  growl = require('growl');

  logError = function(err, title) {
    if (!(title != null)) {
      title = 'Brunch jade error';
    }
    if (err != null) {
      console.log(color(err, "red"));
      return growl(err, {
        title: title
      });
    }
  };

  fileWriter = function(newFilePath) {
    return function(err, content) {
      var dirname;
      if (err != null) {
        throw err;
      }
      if (!(content != null)) {
        return;
      }
      dirname = sysPath.dirname(newFilePath);
      return mkdirp(dirname, '0775', function(err) {
        if (err != null) {
          throw err;
        }
        return fs.writeFile(newFilePath, content, function(err) {
          if (err != null) {
            throw err;
          }
        });
      });
    };
  };

  isArray = function(obj) {
    return !!(obj && obj.concat && obj.unshift && !obj.callee);
  };

  extend = function(object, properties) {
    Object.keys(properties).forEach(function(key) {
      return object[key] = properties[key];
    });
    return object;
  };

  loadPackages = function(rootPath, callback) {
    var nodeModules;
    rootPath = sysPath.resolve(rootPath);
    nodeModules = "" + rootPath + "/node_modules";
    return fs.readFile(sysPath.join(rootPath, 'package.json'), function(error, data) {
      var deps, json, plugins, _ref;
      if (error != null) {
        return callback(error);
      }
      json = JSON.parse(data);
      deps = Object.keys(extend((_ref = json.devDependencies) != null ? _ref : {}, json.dependencies));
      try {
        plugins = deps.map(function(dependency) {
          try {
            return require("" + nodeModules + "/" + dependency);
          } catch (err) {
            return {};
          }
        });
      } catch (err) {
        error = err;
      }
      return callback(error, plugins);
    });
  };

  clone = function(obj) {
    var attr, copy;
    if (null === obj || "object" !== typeof obj) {
      return obj;
    }
    copy = obj.constructor();
    for (attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = obj[attr];
      }
    }
    return copy;
  };

  module.exports = StaticJadeCompiler = (function() {

    StaticJadeCompiler.prototype.brunchPlugin = true;

    StaticJadeCompiler.prototype.type = 'template';

    StaticJadeCompiler.prototype.extension = ".jade";

    function StaticJadeCompiler(config) {
      var options, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.config = config;
      this.locals = ((_ref = this.config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.locals : void 0 : void 0) || function() {};
      this.extension = (_ref2 = (_ref3 = this.config.plugins) != null ? (_ref4 = _ref3.static_jade) != null ? _ref4.extension : void 0 : void 0) != null ? _ref2 : ".jade";
      this.relAssetPath = (_ref5 = (_ref6 = this.config.plugins) != null ? (_ref7 = _ref6.static_jade) != null ? _ref7.asset : void 0 : void 0) != null ? _ref5 : "app/assets";
      this.rootPath = (_ref8 = (_ref9 = this.config.plugins) != null ? (_ref10 = _ref9.static_jade) != null ? _ref10.rootPath : void 0 : void 0) != null ? _ref8 : 'app';
      options = ((_ref11 = this.config.plugins) != null ? (_ref12 = _ref11.jade) != null ? _ref12.options : void 0 : void 0) || ((_ref13 = this.config.plugins) != null ? _ref13.jade : void 0) || {};
      this.options = clone(options);
      mkdirp.sync(this.relAssetPath);
      loadPackages(process.cwd(), function(error, packages) {
        var errmsg, p;
        if (error != null) {
          throw error;
        }
        if (__indexOf.call((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = packages.length; _i < _len; _i++) {
            p = packages[_i];
            _results.push(p.name);
          }
          return _results;
        })(), "JadeCompiler") < 0) {
          error = "`jade-brunch` plugin needed by `static-jade-brunch` \ndoesn't seems to be present.";
          logError(error, 'Brunch plugin error');
          errmsg = "* Check that package.json contain the `jade-brunch` plugin\n* Check that it is correctly installed by using `npm list`";
          console.log(color(errmsg, "red"));
          throw error;
        }
      });
    }

    StaticJadeCompiler.prototype.isFileToCompile = function(filePath) {
      var fileDir, fileName, p, positivePaths, _ref, _ref1;
      if ((((_ref = this.config.plugins) != null ? (_ref1 = _ref.static_jade) != null ? _ref1.path : void 0 : void 0) != null)) {
        if (isArray(this.config.plugins.static_jade.path)) {
          fileDir = sysPath.dirname(filePath);
          positivePaths = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = this.config.plugins.static_jade.path;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              p = _ref2[_i];
              if (p.test(fileDir)) {
                _results.push(p);
              }
            }
            return _results;
          }).call(this);
          if (positivePaths.length === 0) {
            return false;
          }
        }
      }
      fileName = sysPath.basename(filePath);
      return fileName.slice(-this.extension.length) === this.extension;
    };

    StaticJadeCompiler.prototype.getHtmlFilePath = function(jadeFilePath, relAssetPath) {
      var newpath, pathStartIdx, relativeFilePath, relativeFilePathParts, rootFilePathParts, util;
      util = require('util');
      relativeFilePathParts = jadeFilePath.split(sysPath.sep);
      relativeFilePathParts.push(relativeFilePathParts.pop().slice(0, -this.extension.length) + ".html");
      rootFilePathParts = this.rootPath.split(sysPath.sep);
      pathStartIdx = rootFilePathParts.length;
      relativeFilePath = sysPath.join.apply(this, relativeFilePathParts.slice(pathStartIdx));
      newpath = sysPath.join(relAssetPath, relativeFilePath);
      return newpath;
    };

    StaticJadeCompiler.prototype.fromJade2Html = function(jadeFilePath, callback) {
      var locals, options,
        _this = this;
      options = this.options;
      locals = clone(this.locals);
      try {
        return fs.readFile(jadeFilePath, function(err, data) {
          var fn;
          if (err) {
            throw err;
          }
          _this.options.filename = jadeFilePath;
          _this.options.basedir = sysPath.join('.', 'app');
          locals.filename = jadeFilePath.replace(new RegExp('^' + _this.options.basedir + '/'), '');
          fn = jade.compile(data, _this.options);
          return callback(err, fn(locals));
        });
      } catch (err) {
        return callback(err);
      }
    };

    StaticJadeCompiler.prototype.onCompile = function(changedFiles) {
      var _this = this;
      return changedFiles.every(function(file) {
        var f, filesToCompile, jadeFileName, newFilePath, _i, _len, _results;
        filesToCompile = (function() {
          var _i, _len, _ref, _results;
          _ref = file.sourceFiles;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if (this.isFileToCompile(f.path)) {
              _results.push(f.path);
            }
          }
          return _results;
        }).call(_this);
        _results = [];
        for (_i = 0, _len = filesToCompile.length; _i < _len; _i++) {
          jadeFileName = filesToCompile[_i];
          newFilePath = _this.getHtmlFilePath(jadeFileName, _this.relAssetPath);
          try {
            _results.push(_this.fromJade2Html(jadeFileName, fileWriter(newFilePath)));
          } catch (err) {
            logError(err);
            _results.push(null);
          }
        }
        return _results;
      });
    };

    return StaticJadeCompiler;

  })();

}).call(this);
